Chapter 2
https://espace.library.uq.edu.au/data/UQ_239427/Lectures_Book.pdf?Expires=1552494390&Signature=HxMDJ7zvda05yQhF4eQl8VYkSauz5jVx63uYDQY2LzzOwYpLVZYbNqp~ymVkMs0PBzfl73K4RKT31wHZS~L4TKKrqIuAjdAGfLr0fiXqGVJHwzSs1NQB2aWKVbedhsuHXZFPAe9lo-aM7uQ~lThAX6vuqqboJFl0uM2Dic6M0RZ8RhQ2uE-lTsTg4rN~SAb744DITPNH1Oy5XdSesXE0mVznR2D8Ty3fnSf0KG3aD~1e6Yiq08ZfO1z-kw5-oo6PRrzVCDbmUaAMBXiTzJLAhBl2vrPHvfeiczIdJcJuEKCikbnT03gghvC6wN8b606cp8~4xKyeqeoH9MJ6lc3S1g__&Key-Pair-Id=APKAJKNBJ4MJBJNC6NLQ

Introduction and 2.1 & 2.2
Convergence Rates of Finite Difference Schemes for the Diffusion Equation with Neumann Boundary Conditions (Doyo Kereyu)

Youtube video: An Introduction to Numerical Computation - Wen Shen
https://www.youtube.com/watch?v=uPuBE-GleoA
https://www.youtube.com/watch?v=c8oXqxYQ-qk&list=PLbxFfU5GKZz3eiOEkcl2By5pYO2CJxZK7&index=93&t=0s

Finite differences for the heat equation: Boundary conditions
http://web.math.ucsb.edu/~grigoryan/124B/lecs/lec17.pdf

Ejemplo de codigo de diferencias finitas
https://scicomp.stackexchange.com/questions/30600/applying-neumann-boundary-conditions-to-diffusion-equation-solution-in-python
USANDO NEUMMAN BC
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 13 17:36:18 2019

@author: E051692
"""

import numpy as np
import matplotlib.pyplot as plt

L=np.pi # value chosen for the critical length
s=101 # number of steps in x
t=10002 # number of timesteps
ds=L/(s-1) # step in x
dt=0.0001 # time step
D=1 # diffusion constant, set equal to 1
C=1 # creation rate of neutrons, set equal to 1
Alpha=(D*dt)/(ds*ds) # constant for diffusion term
Beta=C*dt # constant for u term

x = np.linspace(-L/2, 0, num=51)
x = np.concatenate([x, np.linspace(x[-1] - x[-2], L/2, num=50)]) # setting x in the specified interval

u=np.zeros(shape=(s,t)) #setting the function u
u[50,0]=1/ds # delta function
for k in range(0,t-1):
    u[0,k]=0 # boundary conditions
#    u[s-1,k+1]=(1+Beta-2*Alpha)*u[s-1,k] + 2*Alpha*u[s-2,k] # NEUMMAN BC
    u[s-1,k]=0 # Dirichlet BC
    for i in range(1,s-1):
        u[i,k+1]=(1+Beta-2*Alpha)*u[i,k]+Alpha*u[i+1,k]+Alpha*u[i-1,k] # numerical solution  
    if k == 50 or k == 100 or k == 250 or k == 500 or k == 1000 or k == 10000: # plotting at times
        plt.plot(x,u[:,k])

plt.title('Numerical Solution of the Diffusion equation over time')
plt.xlabel('x')
plt.ylabel('u(x,t)')
plt.show()

#u[s-1,k+1]=(1+Beta-2*Alpha)*u[s-1,k] + 2*Alpha*u[s-2,k]
